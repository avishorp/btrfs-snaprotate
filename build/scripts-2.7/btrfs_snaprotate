#!/usr/bin/python

import getopt, sys
import os, os.path
import subprocess
import logging, re
from dateutil import parser
import time
from btrfs.btrfs import BTRFSUtil, BTRFSExecutionError

usage = """
   btrfs-snaprotate [-l|--label=label] [-k|--keep=num] [-a|--after=command] [--dry-run]
                    [-t|--target=dir] [--log=logspec] [-v] subvolume

     subvolume - The subvolume to snapshot
     --label - The prefix of the name of the snapshot. Every snapshot will be named label_YYYY_MM_DD_hh:mm:ss.
               The default prefix is the name of the last component in the path of the subvolume being snapshot,
               or root for root snapshots.
     --keep - Number of most recent snapshots to keep.
     --after - A command to run after the snapshot was taken. The command will be run under the default shell.
               It will have the following environment variables defined:
               SNAPSUBVOL - The subvolume that was snapshot
               SNAPTARGET - The directory in which the snapshots are stored
               SNAPRECENT - The most recent snapshot

     --target - The directory in which the snapshots are stored (mounted). Defaults to <subvolume>/.snapshot.
                Must reside inside the volume being snapshot.
     -v - Verbose output
"""

default_options = {
  "label": None,       # Dynamically determined
  "keep": 7,
  "after": None,
  "dry": False,
  "target": ".snapshot",
  "log": "TBD",
  "subvolume": None,
  "verbose": False
}

# Regular expression used to check the label validity
label_rx = re.compile(r"[a-zA-Z][a-zA-Z0-9_\-]*$")


class OptionsError(Exception):
  def __init__(self, message):
    super(OptionsError, self).__init__(message)


##
## Utility Functions
##

def parse_command_line(args):
  short_options = "l:k:a:t:v"
  long_options = [ "label=", "keep=", "after=", "dry-run", "target=", "log=" ]

  # Parse the command line
  try:
    opts, pargs = getopt.getopt(args, short_options, long_options)
  except getopt.GetoptError as err:
    raise OptionsError(str(err))

  options = default_options.copy()
  for op, value in opts:
    if op in ("-l", "--label"):
        if (label_rx.match(value) is None):
            raise OptionsError("Invalid label")
        options["label"] = value

    elif op in ("-k", "--keep"):
      try:
        options["keep"] = int(value)
        if (options["keep"] < 1) or (options["keep"] > 500):
          raise ValueError()
      except ValueError:
        raise OptionsError("Keep value must be an integer between 1-500")

    elif op in ("-a", "--after"):
      options["after"] = value

    elif op == "--dry-run":
      options["dry"] = True

    elif op in ("-t", "--target"):
      options["target"] = value

    elif op == "-v":
       options["verbose"] = True

  # Handle the (single) positional argument
  if len(pargs) != 1:
    raise OptionsError("Must specify exactly one subvolume to snapshot")
  options["subvolume"] = pargs[0]

  if options["verbose"]:
    logging.getLogger().setLevel(logging.DEBUG)

  logging.debug("Exec arguments: Subvolume = %s" % options["subvolume"])
  logging.debug("Exec arguments: Label = %s" % options["label"])
  logging.debug("Exec arguments: Keep = %d" % options["keep"])
  if options["after"] is not None:
      logging.debug("Exec arguments: After = %s" % options["after"])
  logging.debug("Exec arguments: Dry Run = %s" % ("Yes" if options["dry"] else "No"))
  logging.debug("Exec arguments: Target = %s" % options["target"])

  return options

def snapshot_filename(target, label):
    now = time.strftime("%Y-%m-%d_%H:%M:%S")
    return os.path.join(target, label + '_' + now)

#####
##### Main
#####
if __name__ == "__main__":
  # Set up logger
  logging.basicConfig(format = "%(asctime)s [%(levelname)s] %(message)s")

  try:
    options = parse_command_line(sys.argv[1:])
  except OptionsError as err:
    logging.critical(str(err))
    sys.stderr.write(usage)
    sys.exit(1)

  # If no label was specified, determine it from the target path
  if options["label"] is None:
      ll = os.path.split(options["subvolume"].rstrip("/"))[1]
      if ll == '':
          ll = 'root'

      options["label"] = ll

  try:
      # Read btrfs version
      btrfs = BTRFSUtil()
      btrfs_ver = btrfs.btrfs_util_version()
      logging.debug("btrfs version: %s" % btrfs_ver)

      # Check that the given subvolume is a btrfs subvolume
      if (not btrfs.is_btrfs(options["subvolume"])):
          logging.error("Directory %s is not a btrfs subvolume" % options["subvolume"])
          sys.exit(1)
      else:
          logging.debug("Directory %s is a btrfs volume")

      # Check that the target direcotry exists, or create it
      target_dir = os.path.join(options["subvolume"], options["target"])
      logging.debug("Target directory: " + target_dir)
      if (not os.path.isdir(target_dir)):
          logging.debug("Target directory does not exist, trying to create")
          try:
              os.mkdir(target_dir)
          except OSError, e:
              logging.error("Target directory creation failed: [%d] %s" % (e.errno, e.strerror))
              sys.exit(1)

       # Create the snapshot
      logging.info("Creating snapshot of %s" % options["subvolume"])
      new_snapshot_filename = snapshot_filename(target_dir, options["label"])
      btrfs.create_snapshot(options["subvolume"], new_snapshot_filename)

      # List all the snapshots under the target directory
      all_subvolumes = btrfs.list_subvolumes(options["subvolume"])
      # Filter only those who are under the target firectory and their name starts
      # with out label
      subvolumes = filter(lambda p: p.startswith(options['target']+'/'+options['label']), all_subvolumes)
      # Retrieve the creation time of each snapshot
      subvolume_time = []
      for sbv in subvolumes:
          info = btrfs.show_subvolume(os.path.join(options["subvolume"], sbv))
          logging.debug('Found subvolume %s with creation time %s' % (sbv, info['Creation time']))
          ctm = parser.parse(info['Creation time'])
          # Convert to linear time
          ltm = ctm.toordinal() + ((1.0/24)*ctm.hour) + ((1.0/(24*60)*ctm.minute)) + ((1.0/(24*60*60)*ctm.second))
          subvolume_time.append((sbv, ltm))

      # Sort the subvolume by acending creation time
      sbvs = sorted(subvolume_time, key=lambda item: item[1])

      # Keep only "keep" ones
      keep = options["keep"]
      if len(sbvs) > keep:
          sbv_delete = map(lambda m: m[0], sbvs[0:-keep])

          for sbv in sbv_delete:
            ds = os.path.join(options["subvolume"], sbv)
            logging.info("Deleting old snapshot: " + ds)
            btrfs.delete_snapshot(ds)

      # Finally, if an "after" task is defined, run it
      if options["after"] is not None:
        cmd = options["after"]
        env = {
            "SNAPSUBVOL": options['subvolume'],
            "SNAPTARGET": options['target'],
            "SNAPRECENT": new_snapshot_filename
        }
        print env

        # Invoke the "after" command
        logging.info("Invoking post-snapshot process")
        proc = subprocess.Popen(options["after"], shell=True, env=env, cwd=options['subvolume'])
        rc = proc.wait()
        logging.info("Post-snapshot process returned with %d" % rc)



  except BTRFSExecutionError, e:
      logging.critical(e.message)
      logging.critical("  btrfs exited with %d" % e.ec)
      logging.critical("  stdout:")
      for l in e.stdout.split('\n'):
          logging.critical("  | " + l)
      logging.critical("  stderr:")
      for l in e.stderr.split('\n'):
          logging.critical("  | " + l)


  except RuntimeError, e:
      logging.critical(e.message)
